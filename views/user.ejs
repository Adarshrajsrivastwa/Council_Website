<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile | Student Council</title>   
    <link rel="stylesheet" href="/stylesheet/preloader.css">
    <link rel="stylesheet" href="/stylesheet/navbaar.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css" rel="stylesheet"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <style>
        body::-webkit-scrollbar{
            display: none;
        }
        /* Profile Photo Hover Effects */
        .group:hover .border-zinc-800 {
            border-color: rgba(99, 102, 241, 0.5);
        }

        /* Animation for photo update */
        #profileImage {
            transition: transform 0.2s ease-out;
        }

        /* Success Message Animation */
        @keyframes slideIn {
            from {
                transform: translateY(-1rem);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* Cropper Modal Styles */
        #cropperModal {
            backdrop-filter: blur(5px);
        }

        #cropperModal .cropper-view-box,
        #cropperModal .cropper-face {
            border-radius: 50%;
        }

        #cropperModal .cropper-view-box {
            box-shadow: 0 0 0 1px #39c;
            outline: 0;
        }

        #cropperModal .cropper-face {
            background-color: inherit !important;
        }

        /* Ensure the cropper container maintains aspect ratio */
        .cropper-container {
            width: 100% !important;
            height: auto !important;
            aspect-ratio: 1;
        }

        /* Animation for modal */
        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        #cropperModal > div {
            animation: modalFadeIn 0.3s ease-out;
        }
    </style>
</head>

<body class="bg-black min-h-screen">
    <%- include('partials/preloader') %>

    <div class="navSlide">
        <div class="icon">
         <i class="ri-close-large-line"></i>
        </div>
         <ul class="NavLinks">
           <li><a href="/">Home</a></li>
           <li><a href="/members">Members</a></li>
           <li><a href="/clubs">Clubs</a></li>
           <li><a href="/faculty">Mentors</a></li>
           <li><a href="/gallery">Event Gallary</a></li>
           <li><a href="/login" class="loginButton">Login</a></li>   
       </ul>
       </div>
    <nav>
        <div class="logo">
            <img class="image-logo" src="/image folder/Student council png.png" title="council logo">
            <h1>STUDENT COUNCIL</h1>
        </div>
        <ul class="nav-links">
            <li><a href="/">Home</a></li>
            <li><a href="/members">Members</a></li>
            <li><a href="/clubs">Clubs</a></li>
            <li><a href="/faculty">Mentors</a></li>
            <li><a href="/gallery">Event Gallary</a></li>
            <i class="ri-menu-line"></i>
        </ul>
    </nav>

    <div class="max-w-4xl mx-auto p-4 sm:p-6 lg:p-8 mt-20">
        <!-- Profile Header -->
        <div class="bg-zinc-900 rounded-lg shadow-sm p-6 mb-6">
            <div class="flex flex-col sm:flex-row items-center gap-6">
                <!-- Profile Photo Container with Edit Option -->
                <div class="relative group">
                    <img src="/image folder/image.png" 
                         alt="Profile Picture" 
                         id="profileImage"
                         class="w-32 h-32 rounded-full object-cover border-4 border-zinc-800 shadow-sm transition-all duration-300 group-hover:opacity-75">
                    
                    <!-- Edit Photo Overlay -->
                    <label class="absolute inset-0 flex items-center justify-center rounded-full cursor-pointer opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-black/50">
                        <span class="flex flex-col items-center text-white">
                            <i class="ri-camera-line text-2xl mb-1"></i>
                            <span class="text-xs">Change Photo</span>
                        </span>
                        <input type="file" 
                               class="hidden" 
                               id="profilePhotoInput"
                               accept="image/*"
                               onchange="handleProfilePhotoChange(this)">
                    </label>
                </div>
                
                <div class="text-center sm:text-left">
                    <h1 class="text-2xl font-bold text-white"><%= username %></h1>
                    <p class="text-gray-400 mb-2">Student Council</p>
                    <div class="flex flex-wrap gap-2">
                        <span class="px-3 py-1 text-sm bg-blue-900/50 text-blue-300 rounded-full">
                            Batch 2024
                        </span>
                        <span class="px-3 py-1 text-sm bg-green-900/50 text-green-300 rounded-full">
                            Active Member
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Profile Information -->
        <div class="bg-zinc-900 rounded-lg shadow-sm p-6 mb-6">
            <h2 class="text-xl font-semibold text-white mb-4">Profile Information</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="space-y-1">
                    <p class="text-sm text-gray-400">Enrollment Number</p>
                    <p class="text-white"><%= enrollment %></p>
                </div>
                <div class="space-y-1">
                    <p class="text-sm text-gray-400">Email Address</p>
                    <p class="text-white"><%= email %></p>
                </div>
                <div class="space-y-1">
                    <p class="text-sm text-gray-400">Phone Number</p>
                    <p class="text-white"><%= phone %></p>
                </div>
            </div>
        </div>

        <!-- Skills Section -->
        <div class="bg-zinc-900 rounded-lg shadow-sm p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold text-white">Skills</h2>
                <button onclick="toggleSkillInput()" 
                        id="addSkillBtn"
                        class="text-sm text-blue-400 hover:text-blue-300 transition-colors flex items-center gap-2">
                    <i class="ri-add-line"></i> Add Skills
                </button>
            </div>

            <!-- Input Box (Hidden by default) -->
            <div id="skillInputContainer" class="mb-4 hidden">
                <div class="flex gap-2">
                    <input type="text" 
                           id="skillInput" 
                           placeholder="Type a skill and press Enter" 
                           class="w-full bg-zinc-800 text-white px-4 py-2 rounded-lg border border-zinc-700 focus:border-indigo-500 focus:outline-none">
                    <button onclick="toggleSkillInput()" 
                            class="text-gray-400 hover:text-gray-300 transition-colors">
                        <i class="ri-close-line text-xl"></i>
                    </button>
                </div>
            </div>

            <!-- Skills Display -->
            <div class="flex flex-wrap gap-2" id="skillsContainer">
                <span class="px-3 py-1 text-sm bg-indigo-900/50 text-indigo-300 rounded-full flex items-center gap-2">
                    UI/UX Design
                    <button onclick="this.parentElement.remove()" class="text-indigo-300 hover:text-indigo-200">
                        <i class="ri-close-line"></i>
                    </button>
                </span>
            </div>
        </div>

        <!-- Certifications Section -->
        <div class="bg-zinc-900 rounded-lg shadow-sm p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold text-white">Certifications</h2>
                <label class="cursor-pointer text-sm text-blue-400 hover:text-blue-300 transition-colors flex items-center gap-2">
                    <i class="ri-add-line"></i> Add New
                    <input 
                        type="file" 
                        id="certificationInput"
                        accept=".pdf,.jpg,.jpeg,.png"
                        class="hidden" 
                        onchange="handleCertificationUpload(this)"
                    >
                </label>
            </div>
            <div class="grid grid-cols-1 gap-4" id="certificationsContainer">
                <div class="border border-zinc-800 rounded-lg p-4 hover:border-zinc-700 transition-colors">
                    <div class="flex justify-between items-start">
                        <div>
                            <h3 class="font-medium text-white mb-1">Web Development Fundamentals</h3>
                            <p class="text-sm text-gray-400">Udemy</p>
                        </div>
                    </div>
                    <p class="text-sm text-blue-400 mt-2">Issued: January 2024</p>
                </div>
            </div>
        </div>

        <!-- Registered Events -->
        <div class="bg-zinc-900 rounded-lg shadow-sm p-6">
            <h2 class="text-xl font-semibold text-white mb-4">Registered Events</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div class="border border-zinc-800 rounded-lg p-4 hover:border-zinc-700 transition-colors">
                    <p class="text-sm text-blue-400 mb-1">March 15-16, 2024</p>
                    <h3 class="font-medium text-white mb-2">Saffron Sundown 2024</h3>
                    <span class="text-xs px-2 py-1 bg-yellow-900/50 text-yellow-300 rounded">
                        Upcoming
                    </span>
                </div>

                <div class="border border-zinc-800 rounded-lg p-4 hover:border-zinc-700 transition-colors">
                    <p class="text-sm text-blue-400 mb-1">April 2024</p>
                    <h3 class="font-medium text-white mb-2">Tech Workshop Series</h3>
                    <span class="text-xs px-2 py-1 bg-green-900/50 text-green-300 rounded">
                        Registered
                    </span>
                </div>

                <div class="border border-zinc-800 rounded-lg p-4 hover:border-zinc-700 transition-colors">
                    <p class="text-sm text-blue-400 mb-1">May 2024</p>
                    <h3 class="font-medium text-white mb-2">Cultural Night</h3>
                    <span class="text-xs px-2 py-1 bg-zinc-800 text-gray-300 rounded">
                        Pending
                    </span>
                </div>

                <div class="border border-zinc-800 rounded-lg p-4 hover:border-zinc-700 transition-colors">
                    <p class="text-sm text-blue-400 mb-1">June 2024</p>
                    <h3 class="font-medium text-white mb-2">Sports Tournament</h3>
                    <span class="text-xs px-2 py-1 bg-purple-900/50 text-purple-300 rounded">
                        Coming Soon
                    </span>
                </div>
            </div>
        </div>
    </div>

    <!-- Move this right after the closing of the main div (after the Registered Events section) -->
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-end gap-4 py-6">
            <a href="/auth/logout" 
               class="group inline-flex items-center gap-2 px-6 py-3 bg-zinc-800/50 text-red-400 rounded-lg hover:bg-red-500/10 border border-red-500/20 hover:border-red-500/40 transition-all duration-300">
                <i class="ri-logout-box-line text-lg group-hover:translate-x-1 transition-transform"></i>
                <span class="font-medium">Logout</span>
            </a>
        </div>
    </div>

    <!-- Add this script at the end of the body -->
    <script>
    // Add these variables at the top of your script
    let cropper = null;
    let cropperModal = null;

    // Initialize modal reference
    document.addEventListener('DOMContentLoaded', function() {
        cropperModal = document.getElementById('cropperModal');
    });

    function toggleSkillInput() {
        const inputContainer = document.getElementById('skillInputContainer');
        const addButton = document.getElementById('addSkillBtn');
        const skillInput = document.getElementById('skillInput');
        
        if (inputContainer.classList.contains('hidden')) {
            inputContainer.classList.remove('hidden');
            addButton.classList.add('hidden');
            skillInput.focus();
        } else {
            inputContainer.classList.add('hidden');
            addButton.classList.remove('hidden');
            skillInput.value = '';
        }
    }

    // Update the existing skill input event listener
    document.getElementById('skillInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            const skill = this.value.trim();
            if (skill) {
                const skillsContainer = document.getElementById('skillsContainer');
                const skillElement = document.createElement('span');
                skillElement.className = 'px-3 py-1 text-sm bg-indigo-900/50 text-indigo-300 rounded-full flex items-center gap-2';
                skillElement.innerHTML = `
                    ${skill}
                    <button onclick="this.parentElement.remove()" class="text-indigo-300 hover:text-indigo-200">
                        <i class="ri-close-line"></i>
                    </button>
                `;
                skillsContainer.appendChild(skillElement);
                this.value = ''; // Clear input after adding
                toggleSkillInput(); // Hide input after adding
            }
        } else if (e.key === 'Escape') {
            toggleSkillInput(); // Hide input on Escape
        }
    });

    function handleCertificationUpload(input) {
        const file = input.files[0];
        if (file) {
            // Create new certification card
            const card = document.createElement('div');
            card.className = 'border border-zinc-800 rounded-lg p-4 hover:border-zinc-700 transition-colors';
            
            const fileName = file.name;
            const fileSize = (file.size / (1024 * 1024)).toFixed(2); // Convert to MB
            const currentDate = new Date().toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long'
            });

            card.innerHTML = `
                <div class="flex justify-between items-start">
                    <div>
                        <h3 class="font-medium text-white mb-1">${fileName.split('.').slice(0, -1).join('.')}</h3>
                        <p class="text-sm text-gray-400">Uploaded Certificate</p>
                    </div>
                </div>
                <p class="text-sm text-blue-400 mt-2">Uploaded: ${currentDate}</p>
                <div class="flex items-center justify-between mt-2">
                    <div class="flex items-center gap-2">
                        <i class="ri-file-line text-gray-400"></i>
                        <span class="text-sm text-gray-400">${fileName} (${fileSize} MB)</span>
                    </div>
                    <button onclick="this.closest('.border').remove()" 
                            class="text-red-400 hover:text-red-300 transition-colors">
                        <i class="ri-delete-bin-line"></i>
                    </button>
                </div>
            `;

            // Add the new card at the top of the container
            const container = document.getElementById('certificationsContainer');
            container.insertBefore(card, container.firstChild);

            // Reset file input
            input.value = '';
        }
    }

    // Update handleProfilePhotoChange function
    function handleProfilePhotoChange(input) {
        const file = input.files[0];
        if (file) {
            // Validate file type
            if (!file.type.startsWith('image/')) {
                alert('Please select an image file');
                return;
            }

            // Validate file size (max 5MB)
            const maxSize = 5 * 1024 * 1024; // 5MB in bytes
            if (file.size > maxSize) {
                alert('File size should be less than 5MB');
                return;
            }

            // Read file and initialize cropper
            const reader = new FileReader();
            reader.onload = function(e) {
                // Show modal
                cropperModal.classList.remove('hidden');
                
                // Initialize cropper
                const cropperImage = document.getElementById('cropperImage');
                cropperImage.src = e.target.result;
                
                // Destroy existing cropper if it exists
                if (cropper) {
                    cropper.destroy();
                }
                
                // Initialize new cropper
                cropper = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    dragMode: 'move',
                    autoCropArea: 1,
                    restore: false,
                    guides: true,
                    center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                });
            };
            reader.readAsDataURL(file);
        }
    }

    // Function to close the cropper modal
    function closeCropperModal() {
        cropperModal.classList.add('hidden');
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        // Reset file input
        document.getElementById('profilePhotoInput').value = '';
    }

    // Function to save the cropped image
    function saveCroppedImage() {
        if (!cropper) return;

        // Get cropped canvas
        const canvas = cropper.getCroppedCanvas({
            width: 400,    // Output image width
            height: 400,   // Output image height
        });

        // Convert canvas to blob
        canvas.toBlob((blob) => {
            // Update profile image preview
            const profileImage = document.getElementById('profileImage');
            profileImage.src = canvas.toDataURL();
            
            // Add animation
            profileImage.style.transform = 'scale(0.95)';
            setTimeout(() => {
                profileImage.style.transform = 'scale(1)';
            }, 200);

            // Here you would typically upload the blob to your server
            // const formData = new FormData();
            // formData.append('profile_photo', blob, 'profile_photo.jpg');
            // fetch('/api/upload-profile-photo', {
            //     method: 'POST',
            //     body: formData
            // });

            // Show success message
            showPhotoUpdateMessage();
            
            // Close modal
            closeCropperModal();
        }, 'image/jpeg', 0.9);
    }

    // Function to show a success message
    function showPhotoUpdateMessage() {
        // Create message element
        const message = document.createElement('div');
        message.className = 'fixed top-4 right-4 bg-green-900/90 text-green-300 px-4 py-2 rounded-lg shadow-lg flex items-center gap-2 transform translate-y-[-1rem] opacity-0 transition-all duration-300';
        message.innerHTML = `
            <i class="ri-check-line"></i>
            <span>Profile photo updated successfully</span>
        `;

        // Add to document
        document.body.appendChild(message);

        // Trigger animation
        setTimeout(() => {
            message.style.transform = 'translate-y(0)';
            message.style.opacity = '1';
        }, 3000); // Hide after 3 seconds
    }
    </script>
    <script src="/javascript/preloader.js"></script>
    <script src="/javascript/navbaar.js"></script>

    <!-- Image Cropper Modal -->
    <div id="cropperModal" class="fixed inset-0 bg-black/80 z-50 hidden flex items-center justify-center p-4">
        <div class="bg-zinc-900 rounded-lg max-w-2xl w-full p-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-white">Crop Profile Photo</h3>
                <button onclick="closeCropperModal()" class="text-gray-400 hover:text-white">
                    <i class="ri-close-line text-2xl"></i>
                </button>
            </div>
            
            <!-- Cropper Container -->
            <div class="relative aspect-square w-full mb-4 bg-zinc-800 rounded-lg overflow-hidden">
                <img id="cropperImage" src="" class="max-w-full">
            </div>
            
            <!-- Action Buttons -->
            <div class="flex justify-end gap-3">
                <button onclick="closeCropperModal()" 
                        class="px-4 py-2 text-gray-400 hover:text-white transition-colors">
                    Cancel
                </button>
                <button onclick="saveCroppedImage()" 
                        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                    Save Photo
                </button>
            </div>
        </div>
    </div>
</body>
</html>