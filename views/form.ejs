<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registration for Anwesha 2.0</title>
    <link rel="stylesheet" href="/stylesheet/preloader.css">
    <link
    href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css"
    rel="stylesheet"/>
    <link rel="stylesheet" href="stylesheet/navbaar.css">
    <link rel="stylesheet" href="/stylesheet/Student.css">
    <link rel="stylesheet" href="/stylesheet/form.css">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <%- include('partials/preloader') %>

    <div class="navSlide">
        <div class="icon">
         <i class="ri-close-large-line"></i>
        </div>
         <ul class="NavLinks">
           <li><a href="/">Home</a></li>
           <li><a href="/members">Members</a></li>
           <li><a href="/clubs">Clubs</a></li>
           <li><a href="/faculty">Mentors</a></li>
           <li><a href="/gallery">Event Gallary</a></li>
           <li><a href="/login" class="loginButton">Login</a></li>   
       </ul>
       </div>
    <nav>
        <div class="logo">
            <img class="image-logo" src="/image folder/Student council png.png" title="council logo">
            <h1>STUDENT COUNCIL</h1>
        </div>
        <ul class="nav-links">
            <li><a href="/">Home</a></li>
            <li><a href="/members">Members</a></li>
            <li><a href="/clubs">Clubs</a></li>
            <li><a href="/faculty">Mentors</a></li>
            <li><a href="/gallery">Event Gallary</a></li>
            <i class="ri-menu-line"></i>
        </ul>
    </nav>

<div class="container">
    <!-- Header Section -->
        <header class="form-header">
            <h1>Register for Saffron Sundown Phase 2</h1>
        <p>Be part of an exciting day filled with innovation, creativity, and teamwork!</p>
    </header>
    
        <!-- Progress Bar -->
        <div class="progress-container">
            <div class="progress-track">
                <div class="progress-bar" id="progress-bar"></div>
            </div>
            <div class="steps-container">
                <div class="step active" data-step="1">
                    <div class="step-circle">1</div>
                    <div class="step-label">College & Contact</div>
                </div>
                <div class="step" data-step="2">
                    <div class="step-circle">2</div>
                    <div class="step-label">Event Selection</div>
                </div>
                <div class="step" data-step="3">
                    <div class="step-circle">3</div>
                    <div class="step-label">Participant Details</div>
                </div>
                <div class="step" data-step="4">
                    <div class="step-circle">4</div>
                    <div class="step-label">Payment</div>
                </div>
            </div>
        </div>

    <!-- Registration Form Section -->
        <form id="payment-form" method="post" action="payment/create/orderId">

            <!-- Step 1: College & Contact Details -->
            <div class="form-step active" data-step="1">
                <h2>Step 1: College & Contact Details</h2>
            <div class="form-group">
                <label for="college">College</label>
                <input type="text" id="college" name="college" required placeholder="Enter your college name">
            </div>
            <div class="form-group">
                    <label for="contact">Contact Number</label>
                    <input type="tel" id="contact" name="contact" required pattern="[6-9]{10}" title="Please enter a valid 10 digit number" maxlength="10" minlength="10" 
                    placeholder="Enter your 10 digit Mobile Number" >
                </div>
                <div class="form-navigation">
                    <button type="button" class="nav-button prev-button" data-prev="1">Previous</button>
                    <button type="button" class="nav-button next-button" data-next="2">Next</button>
                </div>
            </div>

            <!-- Step 2: Event Selection -->
            <div class="form-step" data-step="2">
                <h2>Step 2: Select Event</h2>
            <div class="form-group">
                <label for="events">Events List</label>
                    <select class="select-scrollable" id="events" name="events" onchange="updateParticipantsOption()" required placeholder="Select Event">
                    <option value="">Select Event</option>
                    <option value="Entrepreneurship Stall">Entrepreneurship Stall (4th April) </option>
                    <option value="Jamming Session">Jamming Session (4th April) </option>
                    <option value="Flash Mob">Flash Mob (4th April) </option>
                    <option value="Bounce & Burst">Bounce & Burst (4th April) </option>
                    <option value="Pitch-o-Play">Pitch-o-Play (5th April)</option>
                    <option value="Art-Byte">Art-Byte (5th April) </option>
                    <option value="Qala Sangam">Qala Sangam (5th-8th April) </option>
                    <option value="Technocrats Got Talent">Technocrats Got Talent (5th April) </option>
                    <option value="IGI 2: Covert Strike">IGI 2: Covert Strike (5th April) </option>
                    <option value="Renewable Model Showcase">Renewable Model Showcase (5th April) </option>
                    <option value="Musical Chair">Musical Chair (5th April) </option>
                    <option value="Code Clash 4.0">Code Clash 4.0 (7th April)</option>
                    <option value="Mic Drop">Mic Drop (7th April) </option>
                    <option value="Filmy Frenzy">Filmy Frenzy (7th April) </option>
                    <option value="Fashion Fusion">Fashion Fusion (7th April) </option>
                    <option value="Corporate Challenge Showdown">Corporate Challenge Showdown (7th April) </option>
                    <option value="Free Fire">Free Fire (7th April) </option>
                    <option value="Spin The Spotlight">Spin The Spotlight (8th April) </option>
                    <option value="Buzz Quest">Buzz Quest (8th April) </option>
                    <option value="Treasure Hunt">Treasure Hunt (8th April)</option>
                    <option value="Sky High Snap Show">Sky High Snap Show (8th April) </option>
                    <option value="Technical Presentation">Technical Presentation (8th April) </option>
                    <option value="Dumb Charades">Dumb Charades (8th April)</option>
                    <option value="Chinese Whisper">Chinese Whisper (8th April) </option>
                    <option value="Screen to Speech">Screen to Speech (8th April)</option>
                    <option value="BGMI">BGMI (8th April) </option>
                    <option value="Hackathon">Hackathon (9th April) </option>
                    <option value="TIT Got Latent">TIT Got Latent (9th April) </option>
                    <option value="Pixel Perfect">Pixel Perfect (9th April) </option>
                    <option value="Battle Of Witz">Battle Of Witz (9th April) </option>
                    <option value="Meme Mania">Meme Mania (9th April) </option>
                    <option value="Relay Race">Relay Race (9th April) </option>
                    <option value="Arm Wrestling">Arm Wrestling (9th April) </option>
                    <option value="The Mind Game">The Mind Game (9th April) </option>
                    <option value="Robo War">Robo War (10th April) </option>
                    <option value="Robo Race">Robo Race (10th April) </option>
                    <option value="Hover Hunt">Hover Hunt (10th April) </option>
                </select>
            </div>

            <div class="form-navigation">
                <button type="button" class="nav-button prev-button" data-prev="2">Previous</button>
                <button type="button" class="nav-button next-button" data-next="3">Next</button>
            </div>
            </div>

            <!-- Step 3: Number of Participants -->
            <div class="form-step" data-step="3">
                <h2>Step 3: Number of Participants</h2>
            <div class="form-group">
                <label for="number">Number of Participants</label>
                    <select class="select-scrollable" id="number" name="number" onchange="displayParticipantDetails()" required placeholder="Select number of participants">
                        <option value="" disabled selected>Select number of participants</option>
                        <!-- Add options dynamically via JavaScript if needed -->
                </select>
            </div>

                <div id="participantsDetails" class="participants-container">
                    <!-- Participant details will be dynamically added here -->
            </div>

                <div class="form-navigation">
                    <button type="button" class="nav-button prev-button" data-prev="3">
                        <span class="button-text">Previous</span>
            </button>
                    <button type="button" class="nav-button next-button" data-next="4">
                        <span class="button-text">Next</span>
                    </button>
                </div>
            </div>
            
            <!-- Step 4: Payment -->
            <div class="form-step" data-step="4">
                <h2>Step 4: Payment</h2>
                <div class="form-group" id="priceDisplay">
                    <h3>Registration Fee: â‚¹<span id="calculatedPrice">0</span></h3>
                </div>
                <div class="form-navigation">
                    <button type="button" class="nav-button prev-button" data-prev="4">Previous</button>
                    <button type="submit" class="Btn" id="rzp-button1">Proceed to Payment</button>
                </div>
            </div>
        </form>
    </div>

<!-- Footer Section -->
<footer>
    <a href="/Dev">
        <button class="button">Developer team</button>      
      </a>
        </footer>

        <script src="/javascript/preloader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>
    const eventMaxParticipants = {
        "Entrepreneurship Stall": [ "TRIO", "SQUAD-4-MEMBER", "SQUAD-5-MEMBER"],
        "Jamming Session": ["SOLO", "DUO", "TRIO", "SQUAD-4-MEMBER"],
        "Flash Mob": ["SOLO", "DUO", "SQUAD-4-MEMBER"],
        "Bounce & Burst": ["SOLO"],
        "Pitch-o-Play": ["SOLO"],
        "Art-Byte": ["SOLO"],
        "Qala Sangam": ["SOLO"],
        "Technocrats Got Talent": ["SOLO", "DUO", "TRIO", "SQUAD-4-MEMBER"],
        "IGI 2: Covert Strike": ["SOLO"],
        "Renewable Model Showcase": ["TRIO"],
        "Musical Chair": ["SOLO"],
        "Code Clash 4.0": ["SOLO"],
        "Mic Drop": ["SOLO"],
        "Filmy Frenzy": ["DUO"],
        "Fashion Fusion": ["SOLO"],
        "Corporate Challenge Showdown": ["SOLO"],
        "Free Fire": ["SOLO", "SQUAD-4-MEMBER"],
        "Spin The Spotlight": ["SOLO"],
        "Buzz Quest": ["SOLO"],
        "Treasure Hunt": ["SQUAD-4-MEMBER"],
        "Sky High Snap Show": ["SOLO", "TRIO"],
        "Technical Presentation": ["SOLO", "DUO"],
        "Dumb Charades": [  "SQUAD-4-MEMBER"],
        "Chinese Whisper": [  "SQUAD-4-MEMBER"],
        "Screen to Speech": ["SOLO"],
        "BGMI": ["SOLO", "SQUAD-4-MEMBER"],
        "Hackathon": [ "SQUAD-4-MEMBER"],
        "TIT Got Latent": ["SOLO"],
        "Pixel Perfect": ["SOLO"],
        "Battle Of Witz": ["SOLO"],
        "Meme Mania": ["SOLO", "DUO"],
        "Relay Race": ["SQUAD-4-MEMBER"],
        "Arm Wrestling": ["SOLO"],
        "The Mind Game": ["SOLO"],
        "Robo War": ["SQUAD-4-MEMBER", "SQUAD-5-MEMBER"],
        "Robo Race": ["SQUAD-4-MEMBER", "SQUAD-5-MEMBER"],
        "Hover Hunt": ["SOLO"]
    };
    
        function calculatePrice(eventName, participantType) {
            eventName = eventName.toUpperCase();
            participantType = participantType.toUpperCase();
            
            let price = 0;
            
            // Robo events
            if (eventName === "ROBO RACE" || eventName === "ROBO WAR") {
                price = 300;
            }
            // Hackathon
            else if (eventName === "HACKATHON") {
                price = 200;
            }
            // Code events
            else if (eventName === "CODE CLASH 4.0") {
                price = 75;
            }
            // Gaming events
            else if ((eventName === "FREE FIRE" || eventName === "BGMI")) {
                if (participantType === "SOLO") {
                    price = 50;
                } else if (participantType === "SQUAD-4-MEMBER") {
                    price = 200;
                }
            }
            // Musical chair
            else if (eventName === "MUSICAL CHAIR") {
                price = 20;
            }
            // Renewable model showcase
            else if (eventName === "RENEWABLE MODEL SHOWCASE") {
                price = 50;
            }
            // Performance events
            else if ((eventName === "DUMB CHARADES" || eventName === "MIC DROP")) {
                if (participantType === "SOLO") {
                    price = 20;
                } else if (participantType === "DUO") {
                    price = 40;
                } else if (participantType === "TRIO") {
                    price = 60;
                } else if (participantType === "SQUAD-4-MEMBER") {
                    price = 80;
                }
            }
            // Corporate challenge
            else if (eventName === "CORPORATE CHALLENGE SHOWDOWN") {
                if (participantType === "SOLO") {
                    price = 100;
                } else {
                    price = 200;
                }
            }
            // Entrepreneurship stall
            else if (eventName === "ENTREPRENEURSHIP STALL") {
                if (participantType === "SOLO") {
                    price = 50;
                } else {
                    price = 200;
                }
            }
            // Technical presentation
            else if (eventName === "TECHNICAL PRESENTATION") {
                if (participantType === "DUO") {
                    price = 50;
                } else {
                    price = 30;
                }
            }
            // Dance events
            else if (eventName === "FLASH MOB") {
                if (participantType === "SOLO") {
                    price = 50;
                } else if (participantType === "DUO") {
                    price = 100;
                } else if (participantType === "SQUAD-4-MEMBER") {
                    price = 150;
                }
            }
            // Art events
            else if (eventName === "ART-BYTE" || eventName === "PIXEL PERFECT") {
                price = 30;
            }
            // Quiz events
            else if (eventName === "BUZZ QUEST" || eventName === "BATTLE OF WITZ") {
                price = 20;
            }
            // Treasure hunt
            else if (eventName === "TREASURE HUNT") {
                price = 200;
            }
            // Other events (default)
            else {
                price = 50; 
            }
            
            return price;
        }

    function updateParticipantsOption() {
        const eventSelect = document.getElementById("events");
        const numberSelect = document.getElementById("number");
        const selectedEvent = eventSelect.value;
        const carnivalSubOptions = document.getElementById("carnivalSubOptions");

        numberSelect.innerHTML = '<option value="" disabled selected>Select number of participants</option>';

        if (selectedEvent === "CARNIVAL CRAFT/ POSTER MAKING, SLOGAN WRITING") {
            carnivalSubOptions.style.display = "block";
        } else {
            carnivalSubOptions.style.display = "none";
        }

        if (eventMaxParticipants[selectedEvent]) {
            const participantOptions = eventMaxParticipants[selectedEvent];
            participantOptions.forEach(option => {
                const newOption = document.createElement("option");
                    newOption.value = option.toLowerCase();
                newOption.textContent = option;
                numberSelect.appendChild(newOption);
            });
        }
            
            document.getElementById("priceDisplay").style.display = "none";
    }

    function displayParticipantDetails() {
        const numberSelect = document.getElementById("number").value;
        const participantsDetails = document.getElementById("participantsDetails");
            const eventSelect = document.getElementById("events").value;
    
            const price = calculatePrice(eventSelect, numberSelect);
            document.getElementById("calculatedPrice").textContent = price;
            document.getElementById("priceDisplay").style.display = "block";
        
        participantsDetails.innerHTML = "";
    
        function generatePhotoUploadInput(id) {
            return `
                <div class="form-group">
                    <label for="${id}Photo">Upload Identity Card</label>
                    <div class="file-upload-container">
                        <div class="file-drop-area" id="${id}DropArea">
                            <input type="file" 
                                class="file-input" 
                                id="${id}Photo" 
                                name="${id}Photo" 
                                accept="image/*"
                                required
                                placeholder="Upload your identity card"
                                style="opacity: 0; position: absolute; width: 100%; height: 100%; cursor: pointer;">
                            <div class="upload-content" id="${id}UploadContent">
                                <i class="ri-upload-cloud-line upload-icon"></i>
                                <div class="upload-text">
                                    <strong>Click to upload</strong> or drag and drop
                                    <br>
                                    <span>PNG or JPG (max. 2MB)</span>
                                </div>
                            </div>
                            <div class="file-preview" id="${id}Preview" style="display: none;">
                                <img src="" alt="Preview" class="preview-image">
                                <div class="file-info">
                                    <span class="file-name"></span>
                                    <span class="file-size"></span>
                                    </div>
                                <div class="preview-actions">
                                    <button type="button" class="remove-file">Remove</button>
                                </div>
                                </div>
                            </div>
                        </div>
                </div>`;
        }
    
        function generateParticipantFields(role, id) {
            return `
                <div class="participant-section">
                <h3>${role} Information</h3>
                <div class="form-group">
                    <label for="${id}Name">Name</label>
                    <input type="text" id="${id}Name" name="${id}Name" required placeholder="Enter your name">
                </div>
                <div class="form-group">
                    <label for="${id}Enrollment">Enrollment Number</label>
                        <input 
                            type="text" 
                            id="${id}Enrollment" 
                            name="${id}Enrollment" 
                            pattern="^[0-9]{4}[A-Za-z]{2}[0-9]{6}$"
                            maxlength="12"
                            oninput="validateEnrollment(this)"
                            placeholder="Enter your enrollment number"
                            required
                        >
                </div>
                <div class="form-group">
                    <label for="${id}Email">Email ID</label>
                    <input type="email" id="${id}Email" name="${id}Email" required placeholder="Enter your email id">
                </div>
                ${generatePhotoUploadInput(id)}
                </div>`;
        }
    
        if (numberSelect === "solo") {
            participantsDetails.innerHTML = generateParticipantFields("Participant", "solo");
        } else {
            let membersCount = 0;
            if (numberSelect === "duo") membersCount = 1;
            else if (numberSelect === "trio") membersCount = 2;
            else if (numberSelect === "squad-4-member") membersCount = 3;
            else if (numberSelect === "squad-5-member") membersCount = 4;
                else if (numberSelect === "squad") membersCount = 3;
    
            let formContent = generateParticipantFields("Team Leader", "leader");
            formContent += `<h3>Team Members Information</h3>`;
    
            for (let i = 1; i <= membersCount; i++) {
                formContent += generateParticipantFields(`Member ${i}`, `member${i}`);
            }
    
            participantsDetails.innerHTML = formContent;
        }

        // Initialize file upload handlers
        initializeFileUploads();
    }

    // Add this new function to handle file uploads
    function initializeFileUploads() {
        document.querySelectorAll('.file-drop-area').forEach(dropArea => {
            const fileInput = dropArea.querySelector('.file-input');
            const uploadContent = dropArea.querySelector('.upload-content');
            const preview = dropArea.querySelector('.file-preview');
            const previewImage = preview.querySelector('.preview-image');
            const fileName = preview.querySelector('.file-name');
            const fileSize = preview.querySelector('.file-size');
            const removeButton = preview.querySelector('.remove-file');

            // Handle drag and drop
            dropArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropArea.classList.add('drag-over');
            });

            dropArea.addEventListener('dragleave', () => {
                dropArea.classList.remove('drag-over');
            });

            dropArea.addEventListener('drop', (e) => {
                e.preventDefault();
                dropArea.classList.remove('drag-over');
                const file = e.dataTransfer.files[0];
                if (file) handleFile(file);
            });

            // Handle file input change
            fileInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) handleFile(file);
            });

            // Handle file removal
            removeButton.addEventListener('click', (e) => {
                e.stopPropagation();
                resetFileUpload();
            });

            function handleFile(file) {
                // Validate file
                if (file.size > 5 * 1024 * 1024) {
                    alert('File size must be less than 5MB');
                    resetFileUpload();
                    return;
                }

                if (!file.type.match('image.*')) {
                    alert('Please upload an image file (JPG or PNG)');
                    resetFileUpload();
                    return;
                }

                // Show preview
                const reader = new FileReader();
                reader.onload = (e) => {
                    previewImage.src = e.target.result;
                    fileName.textContent = file.name;
                    fileSize.textContent = formatFileSize(file.size);
                    uploadContent.style.display = 'none';
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }

            function resetFileUpload() {
                fileInput.value = '';
                previewImage.src = '';
                fileName.textContent = '';
                fileSize.textContent = '';
                uploadContent.style.display = 'block';
                preview.style.display = 'none';
            }
        });
    }

    function formatFileSize(bytes) {
        if (bytes < 1024) return bytes + ' bytes';
        else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
        else return (bytes / 1048576).toFixed(1) + ' MB';
    }
</script>
  <script>
    document.getElementById('rzp-button1').onclick = function(e) {
  e.preventDefault();
  
  // Get form data
  const form = document.getElementById('payment-form');
  const college = document.getElementById('college').value;
  const selectedEvent = document.getElementById('events').value;
  const participantType = document.getElementById('number').value;
  
  // Calculate price
  const price = calculatePrice(selectedEvent, participantType);
  
  // Validate form before proceeding
  if (!validateForm()) {
    return false;
  }
  
  // Prepare data to send to the server
  const formData = new FormData(form);
  formData.append('amount', price * 100); // Razorpay expects amount in paise
  
  // Create order ID
  axios.post('payment/create/orderId', {
    amount: price * 100, // Convert to paise
    event: selectedEvent,
    participantType: participantType,
    college: college
  })
  .then(function(response) {
          var options = {
            "key": "<%= process.env.RAZORPAY_KEY_ID %>",
            "amount": response.data.amount,
      "currency": response.data.currency || "INR",
            "name": "TECHNOCRATS",
      "description": `Registration for ${selectedEvent}`,
            "image": "/image folder/image.png",
            "order_id": response.data.id,
            "handler": function(response) {
        // After successful payment, submit form with payment details
        const paymentData = {
                razorpayOrderId: response.razorpay_order_id,
                razorpayPaymentId: response.razorpay_payment_id,
          signature: response.razorpay_signature,
          event: selectedEvent,
          participantType: participantType,
          amount: price
        };
        
        axios.post('payment/api/payment/verify', paymentData)
        .then(function(response) {
          alert('Payment successful! Registration complete.');
          window.location.href = '/eventPage'; // Redirect to success page
        })
        .catch(function(error) {
                console.error(error);
          alert('Payment verification failed. Please contact support.');
              });
            },
            "prefill": {
        "name": document.getElementById('soloName')?.value || document.getElementById('leaderName')?.value || "",
        "email": document.getElementById('soloEmail')?.value || document.getElementById('leaderEmail')?.value || "",
        "contact": document.getElementById('contact')?.value || "",
            },
            "notes": {
        "college": college,
        "event": selectedEvent
            },
            "theme": {
              "color": "#000099"
            }
          };
    
          var rzp1 = new Razorpay(options);
          rzp1.open();
        })
  .catch(function(error) {
    console.error('Error creating order:', error);
    alert('Unable to process payment at this time. Please try again later.');
        });
    };

// Validate form before submission
function validateForm() {
  const form = document.getElementById('payment-form');
  const requiredFields = form.querySelectorAll('[required]');
  let isValid = true;
  
  requiredFields.forEach(field => {
    if (!field.value) {
      field.classList.add('error');
      isValid = false;
    } else {
      field.classList.remove('error');
    }
  });
  
  if (!isValid) {
    alert('Please fill in all required fields');
  }
  
  return isValid;
}

// Add this to your existing file handling code
document.addEventListener('DOMContentLoaded', function() {
  setTimeout(() => {
    document.querySelectorAll('.file-input').forEach(input => {
      input.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          // Check file size (max 5MB)
          if (file.size > 5 * 1024 * 1024) {
            alert('File size exceeds 5MB limit');
            this.value = '';
            return;
          }
          
          const id = this.id.replace('Photo', '');
          const preview = document.getElementById(`${id}Preview`);
          const fileName = document.getElementById(`${id}FileName`);
          const fileSize = document.getElementById(`${id}FileSize`);
          const dropContent = document.getElementById(`${id}DropContent`);
          const previewContent = document.getElementById(`${id}PreviewContent`);
          
          preview.src = URL.createObjectURL(file);
          
          fileName.textContent = file.name;
          fileSize.textContent = formatFileSize(file.size);
          
          dropContent.style.display = 'none';
          previewContent.style.display = 'block';
          
          const removeBtn = previewContent.querySelector('.remove-file');
          removeBtn.addEventListener('click', function() {
            input.value = '';
            dropContent.style.display = 'flex';
            previewContent.style.display = 'none';
          });
          
          const changeBtn = previewContent.querySelector('.change-file');
          changeBtn.addEventListener('click', function() {
            input.click();
          });
        }
      });
    });
  }, 100);
});

function formatFileSize(bytes) {
  if (bytes < 1024) return bytes + ' bytes';
  else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
  else return (bytes / 1048576).toFixed(1) + ' MB';
}
  </script>
<script src="javascript/navbaar.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
        function initializeFileUpload(id) {
            const dropArea = document.getElementById(`${id}DropArea`);
            const fileInput = dropArea.querySelector('.file-input');
            const dropContent = dropArea.querySelector('.file-drop-content');
            const previewContent = dropArea.querySelector('.file-preview-content');
            const preview = dropArea.querySelector('.file-preview');
            const fileName = dropArea.querySelector('.file-name');
            const fileSize = dropArea.querySelector('.file-size');
            const removeBtn = dropArea.querySelector('.remove-file');
            const changeBtn = dropArea.querySelector('.change-file');

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            // Handle file selection
            fileInput.addEventListener('change', handleFileSelect);
            dropArea.addEventListener('drop', handleDrop);
            removeBtn.addEventListener('click', removeFile);
            changeBtn.addEventListener('click', () => fileInput.click());

            function handleFileSelect(e) {
                const files = e.target.files;
                handleFiles(files);
            }

            function handleDrop(e) {
                const files = e.dataTransfer.files;
                handleFiles(files);
            }

            function handleFiles(files) {
                if (files.length) {
                    const file = files[0];
                    if (validateFile(file)) {
                        showPreview(file);
                    }
                }
            }

            function validateFile(file) {
                const validTypes = ['image/jpeg', 'image/png'];
                const maxSize = 5 * 1024 * 1024; // 5MB

                if (!validTypes.includes(file.type)) {
                    showError(input, 'Please upload a PNG or JPG file');
                    return false;
                }

                if (file.size > maxSize) {
                    showError(input, 'File size must be less than 5MB');
                    return false;
                }

                return true;
            }

            function showPreview(file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    fileName.textContent = file.name;
                    fileSize.textContent = formatFileSize(file.size);
                    dropContent.style.opacity = '0';
                    previewContent.classList.add('active');
                };
                reader.readAsDataURL(file);
            }

            function removeFile(e) {
                e.stopPropagation();
                fileInput.value = '';
                preview.src = '';
                dropContent.style.opacity = '1';
                previewContent.classList.remove('active');
            }

            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
            }

            function showError(input, message) {
                const formGroup = input.closest('.form-group');
                const errorDiv = formGroup.querySelector('.field-error');
                formGroup.classList.add('error');
                errorDiv.textContent = message;
                errorDiv.style.display = 'block';
            }
        }

        // Initialize file upload for each participant
        // You'll need to call this function for each participant's file upload field
        // Example: initializeFileUpload('leader');
    });
  </script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const formSteps = document.querySelectorAll('.form-step');
    const progressBar = document.getElementById('progress-bar');
    const stepIndicators = document.querySelectorAll('.step');

    // Navigation button click handler
    document.querySelectorAll('.nav-button').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            
            const currentStep = parseInt(this.closest('.form-step').dataset.step);
            let targetStep;

            if (this.classList.contains('next-button')) {
                targetStep = currentStep + 1;
                if (!validateCurrentStep(currentStep)) return;
            } else if (this.classList.contains('prev-button')) {
                targetStep = currentStep - 1;
            }

            if (targetStep >= 1 && targetStep <= formSteps.length) {
                navigateToStep(targetStep);
            }
        });
    });

    function navigateToStep(stepNumber) {
        // Hide all steps
        formSteps.forEach(step => step.classList.remove('active'));
        
        // Show target step
        const targetStep = document.querySelector(`.form-step[data-step="${stepNumber}"]`);
        targetStep.classList.add('active');

        // Update progress bar
        const progress = ((stepNumber - 1) / (formSteps.length - 1)) * 100;
        progressBar.style.width = `${progress}%`;

        // Update step indicators
        stepIndicators.forEach((indicator, index) => {
            if (index + 1 < stepNumber) {
                indicator.classList.add('completed');
                indicator.classList.remove('active');
            } else if (index + 1 === stepNumber) {
                indicator.classList.add('active');
                indicator.classList.remove('completed');
            } else {
                indicator.classList.remove('active', 'completed');
            }
        });

        // Scroll to top of form
        const formContainer = document.querySelector('.container');
        formContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    function validateCurrentStep(stepNumber) {
        const currentStep = document.querySelector(`.form-step[data-step="${stepNumber}"]`);
        const requiredFields = currentStep.querySelectorAll('[required]');
        let isValid = true;

        requiredFields.forEach(field => {
            // Clear previous errors
            field.classList.remove('error');
            removeErrorMessage(field);

            if (!field.value) {
                isValid = false;
                showErrorForField(field, 'This field is required');
            } else if (field.id === 'contact') {
                // Validate phone number
                if (!/^\d{10}$/.test(field.value)) {
                    isValid = false;
                    showErrorForField(field, 'Please enter a valid 10-digit number');
                }
            } else if (field.type === 'email') {
                // Validate email
                if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(field.value)) {
                    isValid = false;
                    showErrorForField(field, 'Please enter a valid email address');
                }
            }
        });

        return isValid;
    }

    function showErrorForField(field, message) {
        field.classList.add('error');
        const formGroup = field.closest('.form-group');
        
        // Remove any existing error message
        removeErrorMessage(field);
        
        // Create and add new error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'field-error';
        errorDiv.textContent = message;
        errorDiv.style.color = '#ff3366';
        errorDiv.style.fontSize = '0.8rem';
        errorDiv.style.marginTop = '5px';
        formGroup.appendChild(errorDiv);
    }

    function removeErrorMessage(field) {
        const formGroup = field.closest('.form-group');
        const existingError = formGroup.querySelector('.field-error');
        if (existingError) {
            existingError.remove();
        }
    }

    // Real-time validation
    document.querySelectorAll('input, select').forEach(input => {
        input.addEventListener('input', function() {
            this.classList.remove('error');
            removeErrorMessage(this);
        });
    });

    // Initialize the form
    navigateToStep(1);
});
</script>



<!--Progress Bar-->
  <script>
  const steps = document.querySelectorAll(".form-step");
    const progressBar = document.getElementById("progress-bar");
    const nextBtns = document.querySelectorAll(".next-btn");
    const prevBtns = document.querySelectorAll(".prev-btn");
    let currentStep = 0;

    nextBtns.forEach((btn) => {
        btn.addEventListener("click", () => {
            steps[currentStep].classList.remove("active");
            currentStep++;
            steps[currentStep].classList.add("active");
            updateProgressBar();
        });
    });

    prevBtns.forEach((btn) => {
        btn.addEventListener("click", () => {
            steps[currentStep].classList.remove("active");
            currentStep--;
            steps[currentStep].classList.add("active");
            updateProgressBar();
        });
    });

    function updateProgressBar() {
        progressBar.style.width = ((currentStep / (steps.length - 1)) * 100) + "%";
    }
    </script>

<script>
function validateEnrollment(input) {
    // Remove any non-alphanumeric characters
    let value = input.value.replace(/[^a-zA-Z0-9]/g, '');
    
    // Convert to uppercase for consistency
    value = value.toUpperCase();
    
    // Format: YYYYBBNNNNNN (Y=Year, B=Branch, N=Number)
    if (value.length <= 4) {
        // First 4 characters are numbers (year)
        value = value.replace(/[^0-9]/g, '');
    } else if (value.length <= 6) {
        // Next 2 characters are letters (branch)
        const numbers = value.slice(0, 4);
        const letters = value.slice(4).replace(/[^A-Z]/g, '');
        value = numbers + letters;
    } else {
        // Last 6 characters are numbers
        const numbers = value.slice(0, 4);
        const letters = value.slice(4, 6).replace(/[^A-Z]/g, '');
        const lastNumbers = value.slice(6).replace(/[^0-9]/g, '');
        value = numbers + letters + lastNumbers;
    }

    // Update input value
    input.value = value;

    // Validate the format
    const isValid = /^[0-9]{4}[A-Z]{2}[0-9]{6}$/.test(value);
    
    // Visual feedback
    if (value.length === 12) {
        if (isValid) {
            input.classList.remove('error');
            input.classList.add('valid');
            // Remove error message if exists
            const errorMsg = input.parentElement.querySelector('.error-message');
            if (errorMsg) errorMsg.remove();
        } else {
            input.classList.add('error');
            input.classList.remove('valid');
            // Show error message
            showEnrollmentError(input, 'Format: YYYY(year) BB(branch) NNNNNN(number)');
        }
    } else if (value.length > 0) {
        input.classList.add('error');
        input.classList.remove('valid');
        // Show error message
        showEnrollmentError(input, 'Enrollment number must be 12 characters');
    }

    return isValid;
}

function showEnrollmentError(input, message) {
    // Remove existing error message if any
    const existingError = input.parentElement.querySelector('.error-message');
    if (existingError) {
        existingError.remove();
    }

    // Create and add new error message
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = message;
    input.parentElement.appendChild(errorDiv);
}
  </script>
 </body>
</html>
